import { createSlice } from "@reduxjs/toolkit";
import { getMovies } from "./moviesThunk";

const initialState = {
  moviesList: [],
  isLoading: false,
  message: "",
};

export const moviesSlice = createSlice({
  name: "movies",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    sort: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [getMovies.pending]: (state) => {
      state.isLoading = true;
    },
    [getMovies.fulfilled]: (state, { payload }) => {
      state.isLoading = false;
      state.moviesList = payload;
    },
    [getMovies.rejected]: (state, { payload }) => {
      state.isLoading = false;
      state.message = payload;
    },
  },
});

export const { increment, decrement, incrementByAmount } = moviesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.movies.value)`
export const selectMoviesList = (state) => state.movies.moviesList;

export default moviesSlice.reducer;
